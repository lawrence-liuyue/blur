// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
	mat4 outputMatrix;
	outputMatrix[0] = vec4(1.06427, -0.017395, -0.017395, 0);
	outputMatrix[1] = vec4(-0.0583917, 1.02328, -0.0583917, 0);
	outputMatrix[2] = vec4(-0.00588, -0.00588, 1.07579, 0);
	outputMatrix[3] = vec4(0, 0, 0, 1);
	
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif
	
	o.rgb = o.rgb / (o.rgb + 0.0019);
	o.rgb = clamp(vec3(outputMatrix * vec4(o.rgb, 1.0)), 0.0, 1.0);
	o.rgb = o.rgb / (o.rgb + 0.0019);
    
    return o;
  }
}%
