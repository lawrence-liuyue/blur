// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: grey }
        tilingOffset:   { value: [1, 1, 0, 0] }
        mainColor:      { value: [1, 1, 1, 1], linear: true, editor: { type: color } }
        colorScale:     { value: [1, 1, 1], target: colorScaleAndCutoff.xyz }
        alphaThreshold: { value: 0.5, target: colorScaleAndCutoff.w, editor: { parent: USE_ALPHA_TEST } }
        color:          { target: mainColor, linear: true, editor: { visible: false } } # backward compability
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <input>
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>
  #include <cc-fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #if USE_TEXTURE
    out vec2 v_uv;
    uniform TexCoords {
      vec4 tilingOffset;
    };
  #endif

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    #if USE_TEXTURE
      v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
      #if SAMPLE_FROM_RT
        CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
      #endif
    #endif

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif

    CC_TRANSFER_FOG(matWorld * position);
    return cc_matProj * (cc_matView * matWorld) * position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <output-standard>
  #include <cc-fog-fs>

  #if USE_ALPHA_TEST
    #pragma define ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
  };

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  vec4 frag () {
    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);

	float w = 600.0;
	float h = 1320.0;
	
	float blurWeightsAndOffset[30];
	blurWeightsAndOffset[0] = 0.0618246;
	blurWeightsAndOffset[1] = 0.0799065;
	blurWeightsAndOffset[2] = 0.0741542;
	blurWeightsAndOffset[3] = 0.06594;
	blurWeightsAndOffset[4] = 0.0561851;
	blurWeightsAndOffset[5] = 0.0458725;
	blurWeightsAndOffset[6] = 0.0358874;
	blurWeightsAndOffset[7] = 0.0269024;
	blurWeightsAndOffset[8] = 0.0193241;
	blurWeightsAndOffset[9] = 0.0133005;
	blurWeightsAndOffset[10] = 0.00877189;
	blurWeightsAndOffset[11] = 0.00554342;	
	blurWeightsAndOffset[12] = 0.00335676;
	blurWeightsAndOffset[13] = 0.0019477;
	blurWeightsAndOffset[14] = 0.00108288;
	
	blurWeightsAndOffset[15] = 0.665477;
	blurWeightsAndOffset[16] = 2.49331;
	blurWeightsAndOffset[17] = 4.48796;
	blurWeightsAndOffset[18] = 6.48262;
	blurWeightsAndOffset[19] = 8.47727;
	blurWeightsAndOffset[20] = 10.4719;
	blurWeightsAndOffset[21] = 12.4666;
	blurWeightsAndOffset[22] = 14.4613;
	blurWeightsAndOffset[23] = 16.567;
	blurWeightsAndOffset[24] = 18.4507;
	blurWeightsAndOffset[25] = 20.4454;
	blurWeightsAndOffset[26] = 22.4401;
	blurWeightsAndOffset[27] = 24.4348;
	blurWeightsAndOffset[28] = 26.4296;
	blurWeightsAndOffset[29] = 28.4243;
	
  
    float blurStep = 0.000758;
	#define blurSize 15

    float offset;
    vec2 lTexCoords, rTexCoords;

    for (int i = 0; i < blurSize; ++i) {
        offset = blurStep * blurWeightsAndOffset[blurSize + i];
        lTexCoords = v_uv - vec2(0, offset);
		
		
        rTexCoords = v_uv + vec2(0, offset);

        color.rgb += ((texture(mainTexture, lTexCoords).rgb + texture(mainTexture, rTexCoords).rbg) * blurWeightsAndOffset[i]);
    }
	
	return CCFragOutput(color);
  }
}%
